#!/usr/bin/env uv run --script
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "skypilot[aws]",
#     "rich",
#     "pyyaml",
# ]
# ///

"""
SkyPilot deployment CLI for Bacalhau sensor clusters.
Clean, modern approach using SkyPilot for cloud orchestration.
"""

import os
import sys
import subprocess
import time
from pathlib import Path
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich import box
import yaml

console = Console()


def find_config_dir():
    """Find the configuration directory with fallback logic."""
    # Try current working directory first
    cwd_config = Path.cwd() / "credentials"
    if cwd_config.exists() and (cwd_config / "orchestrator_endpoint").exists():
        return Path.cwd()

    # Try script directory as fallback
    script_dir = Path(__file__).parent
    script_config = script_dir / "credentials"
    if script_config.exists() and (script_config / "orchestrator_endpoint").exists():
        return script_dir

    # Return current working directory as default (for setup)
    return Path.cwd()


def check_credentials(config_dir=None):
    """Check that required credential files exist."""
    if config_dir is None:
        config_dir = find_config_dir()

    config_dir = Path(config_dir)
    required_files = [
        "credentials/orchestrator_endpoint",
        "credentials/orchestrator_token",
        "credentials/aws-credentials"
    ]

    missing_files = []
    for file_path in required_files:
        full_path = config_dir / file_path
        if not full_path.exists():
            missing_files.append(str(full_path))

    if missing_files:
        console.print("[red]Missing required credential files:[/red]")
        for file_path in missing_files:
            console.print(f"  - {file_path}")
        console.print(f"\n[yellow]Searched in: {config_dir}[/yellow]")
        console.print("\n[bold]To fix:[/bold]")
        console.print("1. Run from a directory with credentials/ folder, or")
        console.print("2. Create credentials in current directory, or")
        console.print("3. Use --config-dir to specify location")
        console.print("\nSee credentials/README.md for setup instructions.")
        return False, config_dir

    console.print(f"[green]‚úì[/green] All credential files found in: {config_dir}")
    return True, config_dir


def load_config(config_dir=None):
    """Load configuration from sky-config.yaml."""
    if config_dir is None:
        config_dir = find_config_dir()

    config_dir = Path(config_dir)
    config_path = config_dir / "sky-config.yaml"

    if not config_path.exists():
        console.print(f"[red]Configuration file not found: {config_path}[/red]")
        return None, config_dir

    with open(config_path, 'r') as f:
        return yaml.safe_load(f), config_dir


def run_sky_command(args, check=True):
    """Run a SkyPilot command."""
    cmd = ['sky'] + args
    console.print(f"[dim]Running: {' '.join(cmd)}[/dim]")

    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=check)
        return result
    except subprocess.CalledProcessError as e:
        console.print(f"[red]Command failed: {e}[/red]")
        if e.stderr:
            console.print(f"[red]Error: {e.stderr}[/red]")
        return e


def deploy_cluster():
    """Deploy the Bacalhau sensor cluster globally."""
    console.print("[bold blue]üåç Deploying Global Bacalhau Sensor Network[/bold blue]\n")

    # Check prerequisites
    creds_ok, config_dir = check_credentials()
    if not creds_ok:
        return 1

    # Load SkyPilot configuration directly
    sky_config_path = config_dir / "bacalhau-cluster.yaml"
    if not sky_config_path.exists():
        console.print(f"[red]‚ùå SkyPilot config not found: {sky_config_path}[/red]")
        return 1

    with open(sky_config_path) as f:
        sky_config = yaml.safe_load(f)

    deployment_name = sky_config['name']
    total_nodes = sky_config['num_nodes']
    instance_type = sky_config['resources']['instance_type']
    infra = sky_config['resources'].get('infra', 'aws')

    console.print(Panel(
        f"[bold]üöÄ Global Deployment Plan[/bold]\n\n"
        f"Deployment: {deployment_name}\n"
        f"Total nodes: [bold green]{total_nodes}[/bold green] (distributed worldwide)\n"
        f"Infrastructure: [bold blue]{infra}[/bold blue] (auto-selects best zones globally)\n"
        f"Instance type: {instance_type}\n"
        f"Spot instances: [bold yellow]Yes[/bold yellow] (cost optimized)\n\n"
        f"[dim]Coverage: US, Europe, Asia Pacific, South America, and more[/dim]",
        title="üåç Global Deployment Plan",
        border_style="green"
    ))

    # Launch cluster
    console.print("\n[bold]üöÄ Launching global cluster...[/bold]")
    console.print(f"[dim]Using config from: {config_dir}[/dim]")

    # Change to config directory for SkyPilot execution
    original_cwd = os.getcwd()
    os.chdir(config_dir)

    try:
        result = run_sky_command(['launch', '-c', deployment_name, 'bacalhau-cluster.yaml'])
    finally:
        os.chdir(original_cwd)

    if isinstance(result, subprocess.CalledProcessError):
        return 1

    console.print("[green]‚úì[/green] Cluster deployment initiated")
    console.print("\n[bold]Monitoring deployment progress...[/bold]")

    # Wait a bit for instances to come up
    time.sleep(30)

    # Show status
    show_status()

    console.print(f"\n[green]‚úì Cluster '{deployment_name}' deployed successfully![/green]")
    console.print("\n[bold]Next steps:[/bold]")
    console.print("1. Check status: ./sky-deploy status")
    console.print("2. View logs: ./sky-deploy logs")
    console.print("3. SSH to nodes: ./sky-deploy ssh")

    return 0


def show_status():
    """Show cluster status."""
    console.print("[bold]Cluster Status[/bold]\n")

    # Get SkyPilot status
    result = run_sky_command(['status'], check=False)

    if result.returncode == 0:
        console.print(result.stdout)
    else:
        console.print("[yellow]No active clusters found[/yellow]")

    return 0


def show_logs(node_id=None):
    """Show cluster logs."""
    config = load_config()
    if not config:
        return 1

    deployment_name = config['deployment']['name']

    if node_id:
        console.print(f"[bold]Logs for node {node_id}[/bold]\n")
        cmd_args = ['exec', deployment_name, '--node-id', str(node_id), '/opt/scripts/health_check.sh']
    else:
        console.print("[bold]Running health check on all nodes[/bold]\n")
        cmd_args = ['exec', deployment_name, '/opt/scripts/health_check.sh']

    result = run_sky_command(cmd_args, check=False)

    if result.returncode == 0:
        console.print(result.stdout)
    else:
        console.print(f"[red]Failed to get logs: {result.stderr}[/red]")

    return result.returncode


def ssh_to_cluster(node_id=None):
    """SSH to cluster nodes."""
    config = load_config()
    if not config:
        return 1

    deployment_name = config['deployment']['name']

    if node_id:
        cmd_args = ['ssh', deployment_name, '--node-id', str(node_id)]
    else:
        cmd_args = ['ssh', deployment_name]

    # Run SSH interactively
    subprocess.run(['sky'] + cmd_args)
    return 0


def destroy_cluster():
    """Destroy the cluster."""
    config = load_config()
    if not config:
        return 1

    deployment_name = config['deployment']['name']

    console.print(f"[bold red]Destroying cluster: {deployment_name}[/bold red]")
    console.print("[yellow]This will terminate all instances and delete all data![/yellow]")

    confirm = console.input("Are you sure? Type 'yes' to confirm: ")
    if confirm.lower() != 'yes':
        console.print("Aborted.")
        return 0

    result = run_sky_command(['down', deployment_name, '-y'])

    if isinstance(result, subprocess.CalledProcessError):
        return 1

    console.print(f"[green]‚úì Cluster '{deployment_name}' destroyed[/green]")
    return 0


def show_help():
    """Show help information."""
    help_text = """
[bold blue]SkyPilot Bacalhau Global Deployment CLI[/bold blue]

[bold green]üåç Global Multi-Zone Deployment Made Simple[/bold green]
Deploys Bacalhau compute nodes across worldwide AWS zones automatically.
Default: 9 nodes across different continents for maximum coverage.

[bold]Commands:[/bold]
  deploy    Deploy global Bacalhau sensor cluster (9 nodes worldwide)
  status    Show cluster status across all zones
  logs      Show cluster logs and health status
  ssh       SSH to cluster nodes
  destroy   Destroy the entire global cluster
  help      Show this help message

[bold]Examples:[/bold]
  ./sky-deploy deploy          # Deploy 9 nodes globally (US, EU, Asia, etc.)
  ./sky-deploy status          # Check status of all worldwide nodes
  ./sky-deploy logs            # View health across all zones
  ./sky-deploy logs --node 1   # View specific node
  ./sky-deploy ssh             # SSH to first available node
  ./sky-deploy ssh --node 2    # SSH to specific node by ID
  ./sky-deploy destroy         # Destroy entire global deployment

[bold]Global Zone Coverage:[/bold]
  ‚Ä¢ US West (Oregon) - us-west-2
  ‚Ä¢ US East (Virginia) - us-east-1
  ‚Ä¢ Europe (Ireland) - eu-west-1
  ‚Ä¢ Asia Pacific (Mumbai) - ap-south-1
  ‚Ä¢ Asia Pacific (Sydney) - ap-southeast-2
  ‚Ä¢ South America (S√£o Paulo) - sa-east-1
  ‚Ä¢ Plus additional zones for redundancy

[bold]Configuration:[/bold]
  Add credentials in credentials/ directory before deploying
  SkyPilot automatically handles zone selection and distribution
    """

    console.print(Panel(help_text, title="Help", border_style="blue"))


def main():
    """Main CLI entry point."""
    if len(sys.argv) < 2:
        show_help()
        return 0

    command = sys.argv[1]

    if command == "deploy":
        return deploy_cluster()
    elif command == "status":
        return show_status()
    elif command == "logs":
        node_id = None
        if len(sys.argv) > 2 and sys.argv[2] == "--node" and len(sys.argv) > 3:
            node_id = sys.argv[3]
        return show_logs(node_id)
    elif command == "ssh":
        node_id = None
        if len(sys.argv) > 2 and sys.argv[2] == "--node" and len(sys.argv) > 3:
            node_id = sys.argv[3]
        return ssh_to_cluster(node_id)
    elif command == "destroy":
        return destroy_cluster()
    elif command == "help":
        show_help()
        return 0
    else:
        console.print(f"[red]Unknown command: {command}[/red]")
        show_help()
        return 1


if __name__ == "__main__":
    sys.exit(main())
