name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --frozen --group dev

      - name: Run ruff linter
        run: |
          uv run ruff check src/spot_deployer/ tests/ --output-format=github
          uv run ruff format --check src/spot_deployer/ tests/

      - name: Run mypy type checker
        run: |
          uv run mypy src/spot_deployer/ --ignore-missing-imports --check-untyped-defs

  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync --frozen
          uv pip install pre-commit

      - name: Cache pre-commit environments
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit hooks
        run: |
          uv run pre-commit run --all-files --show-diff-on-failure

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, pre-commit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --frozen --group dev

      - name: Run tests
        run: uv run pytest tests/ -v --tb=short

  test-matrix:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: [lint-and-typecheck, pre-commit]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --frozen --group dev

      - name: Run tests
        run: |
          uv run pytest tests/ -v --tb=short

  cli-smoke-test:
    name: CLI Smoke Tests
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --frozen --group dev

      - name: Run smoke tests
        run: |
          uv run python scripts/smoke-test.py

      - name: Test CLI commands
        run: |
          # Test version command
          uv run python -m spot_deployer --version

          # Test help command
          uv run python -m spot_deployer --help

          # Test check command (should work without prerequisites in CI)
          uv run python -m spot_deployer check --help

  security-check:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Run Bandit security linter
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          uv run --with bandit bandit -r spot_deployer/ -ll --skip B101,B601 -f json -o bandit-results.json
        continue-on-error: true

      - name: Check for secrets
        run: |
          uv run --with detect-secrets detect-secrets scan --baseline .secrets.baseline
