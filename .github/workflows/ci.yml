name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --frozen --group dev

    - name: Run linting
      run: |
        uv run ruff check src/ tests/ scripts/ --exclude src/amauo/_version.py
        uv run ruff format --check src/ tests/ scripts/ --exclude src/amauo/_version.py

    - name: Run type checking
      run: uv run mypy src/amauo/ --ignore-missing-imports --check-untyped-defs --exclude _version.py

    - name: Run security check
      run: uv run bandit -r src/amauo/ -ll --skip B101,B108,B202,B324,B601

    - name: Run tests
      run: uv run pytest tests/ -v

    - name: Run smoke tests
      run: uv run python scripts/smoke-test.py

    - name: Test CLI installation
      run: uv run python -m amauo --version

  testpypi-deploy:
    name: Deploy to TestPyPI
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    permissions:
      id-token: write
    environment:
      name: testpypi
      url: https://test.pypi.org/project/amauo/

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Build package
      run: uv build

    - name: Normalize version for TestPyPI
      run: |
        # Extract version from built package filename
        WHEEL_FILE=$(ls dist/*.whl | head -1)
        VERSION=$(basename "$WHEEL_FILE" | sed 's/^amauo-//' | sed 's/-py3-none-any\.whl$//')
        echo "Original version from wheel: $VERSION"

        # Remove git hash after + sign for PyPI compatibility
        CLEAN_VERSION=$(echo $VERSION | sed 's/+.*$//')
        echo "Cleaned version for TestPyPI: $CLEAN_VERSION"

        # Only rebuild if version needs cleaning
        if [ "$VERSION" != "$CLEAN_VERSION" ]; then
          echo "Version needs cleaning, rebuilding with: $CLEAN_VERSION"
          export SETUPTOOLS_SCM_PRETEND_VERSION=$CLEAN_VERSION
          rm -rf dist/
          uv build
          echo "New version after rebuild:"
          ls dist/
        else
          echo "Version is already clean: $CLEAN_VERSION"
        fi

    - name: Deploy to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
        verbose: true
