name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --frozen --group dev

    - name: Run linting
      run: |
        uv run ruff check src/ tests/ scripts/ --exclude src/amauo/_version.py
        uv run ruff format --check src/ tests/ scripts/ --exclude src/amauo/_version.py

    - name: Run type checking
      run: uv run mypy src/amauo/ --ignore-missing-imports --check-untyped-defs --exclude _version.py

    - name: Run security check
      run: uv run bandit -r src/amauo/ -ll --skip B101,B108,B202,B324,B601

    - name: Run tests
      run: uv run pytest tests/ -v

    - name: Run smoke tests
      run: uv run python scripts/smoke-test.py

    - name: Test CLI installation
      run: uv run python -m amauo --version

  testpypi-deploy:
    name: Deploy to TestPyPI
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    permissions:
      id-token: write
    environment:
      name: testpypi
      url: https://test.pypi.org/project/amauo/

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Generate clean development version
      run: |
        # Create clean timestamp-based development version for TestPyPI
        # PyPI doesn't allow local versions (versions with +git.hash suffixes)
        TIMESTAMP=$(date +%Y%m%d%H%M%S)

        # Get latest tag version
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        BASE_VERSION=${LATEST_TAG#v}
        DEV_VERSION="${BASE_VERSION}.dev${TIMESTAMP}"

        echo "Latest tag: $LATEST_TAG"
        echo "Base version: $BASE_VERSION"
        echo "Clean development version: $DEV_VERSION"
        echo "DEV_VERSION=$DEV_VERSION" >> $GITHUB_ENV

        # Override dynamic versioning to use clean version
        # This prevents hatch-vcs from adding git hash suffixes
        export SETUPTOOLS_SCM_PRETEND_VERSION="$DEV_VERSION"
        echo "SETUPTOOLS_SCM_PRETEND_VERSION=$DEV_VERSION" >> $GITHUB_ENV

        # Update version in existing _version.py file
        python3 -c "
        import re

        # Read the existing file
        with open('src/amauo/_version.py', 'r') as f:
            content = f.read()

        # Update the version lines for development version
        version = '$DEV_VERSION'

        # Replace version strings
        content = re.sub(r\"__version__ = version = '.*'\", f\"__version__ = version = '{version}'\", content)
        content = re.sub(r\"__version_tuple__ = version_tuple = .*\", f\"__version_tuple__ = version_tuple = (3, 0, 7, 'dev')\", content)

        # Write back
        with open('src/amauo/_version.py', 'w') as f:
            f.write(content)

        print(f'Updated development version to {version}')
        "

    - name: Build package with clean version
      env:
        SETUPTOOLS_SCM_PRETEND_VERSION: ${{ env.DEV_VERSION }}
      run: |
        echo "Building with version: $DEV_VERSION"

        # Try building with uv
        uv build

        # Verify the built version is clean
        BUILT_VERSION=$(ls dist/*.whl | head -1 | sed 's/.*amauo-//' | sed 's/-py3.*//')
        echo "Built version from filename: $BUILT_VERSION"

        # Check if version contains local part (+ symbol)
        if [[ "$BUILT_VERSION" == *"+"* ]]; then
          echo "WARNING: Built version contains local part: $BUILT_VERSION"
          echo "Rebuilding with explicit version override..."

          # Clear dist and rebuild with explicit version
          rm -rf dist/

          # Temporarily set static version in pyproject.toml
          sed -i "s/dynamic = \[\"version\"\]/version = \"$DEV_VERSION\"/" pyproject.toml
          sed -i '/\[tool\.hatch\.version\]/,/raw-options/d' pyproject.toml
          sed -i '/\[tool\.hatch\.build\.hooks\.vcs\]/,/version-file/d' pyproject.toml

          # Update _version.py for fallback
          python3 -c "
          import re
          with open('src/amauo/_version.py', 'r') as f:
              content = f.read()
          content = re.sub(r\"__version__ = version = '.*'\", f\"__version__ = version = '$DEV_VERSION'\", content)
          with open('src/amauo/_version.py', 'w') as f:
              f.write(content)
          "

          # Rebuild
          uv build

          # Verify again
          BUILT_VERSION=$(ls dist/*.whl | head -1 | sed 's/.*amauo-//' | sed 's/-py3.*//')
          echo "Rebuilt version: $BUILT_VERSION"

          if [[ "$BUILT_VERSION" == *"+"* ]]; then
            echo "ERROR: Still contains local part after rebuild"
            exit 1
          fi
        fi

        echo "SUCCESS: Clean version ready for TestPyPI: $BUILT_VERSION"

    - name: Deploy to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
        verbose: true
