name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --frozen --group dev

    - name: Run linting
      run: |
        uv run ruff check src/ tests/ scripts/ --exclude src/amauo/_version.py
        uv run ruff format --check src/ tests/ scripts/ --exclude src/amauo/_version.py

    - name: Run type checking
      run: uv run mypy src/amauo/ --ignore-missing-imports --check-untyped-defs --exclude _version.py

    - name: Run security check
      run: uv run bandit -r src/amauo/ -ll --skip B101,B108,B202,B324,B601

    - name: Run tests
      run: uv run pytest tests/ -v

    - name: Run smoke tests
      run: uv run python scripts/smoke-test.py

    - name: Test CLI installation
      run: uv run python -m amauo --version

  testpypi-deploy:
    name: Deploy to TestPyPI
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    permissions:
      id-token: write
    environment:
      name: testpypi
      url: https://test.pypi.org/project/amauo/

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set development version
      run: |
        # Get latest tag and increment patch version
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v3.0.14")
        BASE_VERSION=${LATEST_TAG#v}

        # Increment patch version (3.0.14 -> 3.0.15)
        IFS='.' read -ra VERSION_PARTS <<< "$BASE_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        NEXT_PATCH=$((PATCH + 1))

        # Add GitHub run number to make each dev build unique for TestPyPI
        NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH.dev$GITHUB_RUN_NUMBER"

        echo "Latest tag: $LATEST_TAG"
        echo "Current version: $BASE_VERSION"
        echo "GitHub run number: $GITHUB_RUN_NUMBER"
        echo "Next development version: $NEXT_VERSION"

        # Update both __version__ file and pyproject.toml
        echo "$NEXT_VERSION" > src/amauo/__version__

        echo "Updated __version__ file to: $NEXT_VERSION"

    - name: Build package
      run: |
        # Get current version from __version__ file
        VERSION=$(cat src/amauo/__version__)
        echo "Package version: $VERSION"

        # Update pyproject.toml with the actual version
        sed -i "s/version = \"0.0.0\"/version = \"$VERSION\"/" pyproject.toml

        echo "Building package..."
        uv build

        # Show what was built
        ls -la dist/
        echo "Package built successfully"

    - name: Deploy to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
        verbose: true
