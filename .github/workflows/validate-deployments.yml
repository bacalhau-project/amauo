name: Validate Deployments

on:
  push:
    paths:
      - 'examples/**'
      - 'test-deployment/**'
      - '.spot/**'
      - 'spot_deployer/**'
  pull_request:
    paths:
      - 'examples/**'
      - 'test-deployment/**'
      - '.spot/**'
      - 'spot_deployer/**'

jobs:
  validate-examples:
    name: Validate Example Deployments
    runs-on: ubuntu-latest
    strategy:
      matrix:
        example:
          - examples/nodejs-app
          - examples/python-api
          - test-deployment

    steps:
      - uses: actions/checkout@v4

      - name: Set up UV
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync

      - name: Validate ${{ matrix.example }}
        run: |
          cd ${{ matrix.example }}
          echo "Validating deployment in $(pwd)"

          # Run validation
          uv run python -m spot_deployer validate

          # Check required files exist
          test -f .spot/deployment.yaml || test -f deployment.yaml

          # If services are defined, check they exist
          if [ -d .spot/services ] || [ -d services ]; then
            echo "Checking service files..."
            for service in $(ls .spot/services/*.service 2>/dev/null || ls services/*.service 2>/dev/null); do
              echo "  - Found service: $(basename $service)"
              # Validate systemd syntax
              grep -q "\[Unit\]" "$service" || (echo "Missing [Unit] section in $service" && exit 1)
              grep -q "\[Service\]" "$service" || (echo "Missing [Service] section in $service" && exit 1)
            done
          fi

          # If scripts are defined, check they're executable
          if [ -d .spot/scripts ] || [ -d scripts ]; then
            echo "Checking script files..."
            for script in $(ls .spot/scripts/*.sh 2>/dev/null || ls scripts/*.sh 2>/dev/null); do
              echo "  - Found script: $(basename $script)"
              # Check shebang
              head -n1 "$script" | grep -q "^#!/" || (echo "Missing shebang in $script" && exit 1)
            done
          fi

  test-tarball-creation:
    name: Test Tarball Creation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up UV
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync

      - name: Test tarball creation
        run: |
          # Create a test directory structure
          mkdir -p test-tarball-project/.spot/{scripts,services,configs}
          echo "version: 1" > test-tarball-project/.spot/deployment.yaml
          echo "tarball_source: ." >> test-tarball-project/.spot/deployment.yaml
          echo "#!/bin/bash" > test-tarball-project/.spot/scripts/test.sh
          echo "echo test" >> test-tarball-project/.spot/scripts/test.sh

          # Test tarball handler directly
          uv run python -c "
from pathlib import Path
from spot_deployer.utils.tarball_handler import TarballHandler

handler = TarballHandler()
source = Path('test-tarball-project')
tarball = handler.create_deployment_tarball(source)
print(f'Created tarball: {tarball}')

# Validate it
is_valid, error = handler.validate_tarball(tarball)
if not is_valid:
    print(f'Tarball validation failed: {error}')
    exit(1)
print('Tarball validation passed')
"

  check-deployment-structure:
    name: Check Deployment Structure
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Check .spot structure
        run: |
          echo "Checking main .spot deployment structure..."

          # Check required files
          test -f .spot/deployment.yaml || (echo "Missing .spot/deployment.yaml" && exit 1)

          # Check directories exist
          test -d .spot/scripts || (echo "Missing .spot/scripts/" && exit 1)
          test -d .spot/services || (echo "Missing .spot/services/" && exit 1)

          echo "✅ Main deployment structure is valid"

      - name: Validate YAML files
        run: |
          # Install yq for YAML validation
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq

          # Validate all deployment.yaml files
          for yaml in $(find . -name "deployment.yaml" -type f); do
            echo "Validating $yaml..."
            yq eval '.' "$yaml" > /dev/null || (echo "Invalid YAML: $yaml" && exit 1)

            # Check required fields
            yq eval '.version' "$yaml" > /dev/null || (echo "Missing 'version' in $yaml" && exit 1)
          done

          echo "✅ All YAML files are valid"
