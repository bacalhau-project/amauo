name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: bacalhau-project/spot-deployer

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Set latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Set version tag for git tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Set edge tag for main branch
            type=edge,branch=main
            # Set PR tag
            type=ref,event=pr
            # Set SHA tag
            type=sha,prefix={{date 'YYYYMMDD'}}-,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        if: github.event_name != 'pull_request'
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        if: github.event_name != 'pull_request'
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name != 'pull_request'
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Create Release Notes
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cat << EOF > release-notes.md
          ## Docker Image

          Pull the image:
          \`\`\`bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          \`\`\`

          ## Quick Start

          1. Create a config file:
          \`\`\`bash
          docker run --rm \\
            -v \$(pwd):/app/output \\
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} setup
          \`\`\`

          2. Deploy instances:
          \`\`\`bash
          docker run --rm \\
            -v ~/.aws:/root/.aws:ro \\
            -v \$(pwd)/config.yaml:/app/config/config.yaml:ro \\
            -v \$(pwd)/files:/app/files:ro \\
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} create
          \`\`\`

          3. List instances:
          \`\`\`bash
          docker run --rm \\
            -v ~/.aws:/root/.aws:ro \\
            -v \$(pwd)/config.yaml:/app/config/config.yaml:ro \\
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} list
          \`\`\`

          4. Destroy instances:
          \`\`\`bash
          docker run --rm \\
            -v ~/.aws:/root/.aws:ro \\
            -v \$(pwd)/config.yaml:/app/config/config.yaml:ro \\
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} destroy
          \`\`\`

          ## Supported Platforms
          - linux/amd64
          - linux/arm64
          EOF