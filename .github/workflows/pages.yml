name: GitHub Pages

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  update-gh-pages:
    name: Update gh-pages branch
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Fetch all tags
      run: |
        git fetch --all --tags --force
        echo "Available tags:"
        git tag -l | sort -V

    - name: Setup Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

    - name: Determine tag
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG="${{ github.ref_name }}"
        fi
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Deploying tag: ${TAG}"

    - name: Checkout tag
      run: |
        git checkout ${{ steps.get_tag.outputs.tag }}

    - name: Update install script
      run: |
        # Update the install script with the correct repository information
        sed -i "s|REPO_OWNER=\".*\"|REPO_OWNER=\"${GITHUB_REPOSITORY_OWNER}\"|g" docs/install.sh
        sed -i "s|REPO_NAME=\".*\"|REPO_NAME=\"${GITHUB_REPOSITORY#*/}\"|g" docs/install.sh

        # Update the HTML with the correct domain (tada.wang)
        PAGES_URL="https://tada.wang"
        sed -i "s|https://yourdomain.com|${PAGES_URL}|g" docs/index.html
        sed -i "s|https://tada.wang|${PAGES_URL}|g" docs/index.html

        # Update version in install script to use this specific tag
        sed -i "s|VERSION=\"latest\"|VERSION=\"${{ steps.get_tag.outputs.tag }}\"|g" docs/install.sh

        # Add version info to the HTML
        sed -i "s|<h1>ðŸš€ Spot Deployer</h1>|<h1>ðŸš€ Spot Deployer</h1>\n        <p><small>Version: ${{ steps.get_tag.outputs.tag }}</small></p>|g" docs/index.html

    - name: Create version file
      run: |
        echo "${{ steps.get_tag.outputs.tag }}" > docs/VERSION
        echo "Updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> docs/VERSION

        # Get all tags and show latest
        echo "" >> docs/VERSION
        echo "All versions:" >> docs/VERSION
        git tag -l | sort -V | tail -5 >> docs/VERSION

        # Suggest next version
        CURRENT_TAG="${{ steps.get_tag.outputs.tag }}"
        if [[ $CURRENT_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          MAJOR=${BASH_REMATCH[1]}
          MINOR=${BASH_REMATCH[2]}
          PATCH=${BASH_REMATCH[3]}
          NEXT_PATCH=$((PATCH + 1))
          echo "" >> docs/VERSION
          echo "Next suggested version: v${MAJOR}.${MINOR}.${NEXT_PATCH}" >> docs/VERSION
        fi

    - name: Copy files to temp directory
      run: |
        mkdir -p /tmp/gh-pages
        cp -r docs/* /tmp/gh-pages/

        # Remove any temporary files we don't need
        rm -f /tmp/gh-pages/placeholder.html /tmp/gh-pages/web.html

    - name: Checkout gh-pages branch
      run: |
        git checkout gh-pages || git checkout -b gh-pages
        git rm -rf . || true

    - name: Copy files from temp
      run: |
        cp -r /tmp/gh-pages/* .

    - name: Commit and push
      run: |
        git add -A
        git commit -m "Deploy version ${{ steps.get_tag.outputs.tag }} to GitHub Pages" || echo "No changes to commit"
        git push origin gh-pages --force

  trigger-pages-build:
    needs: update-gh-pages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write

    steps:
    - name: Trigger GitHub Pages build
      run: |
        # GitHub Pages will automatically build and deploy when gh-pages branch is updated
        # This job just ensures the previous job completed successfully
        echo "GitHub Pages deployment triggered by update to gh-pages branch"
        echo "Check https://github.com/${{ github.repository }}/settings/pages for deployment status"
