name: GitHub Pages

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  update-gh-pages:
    name: Update gh-pages branch
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Fetch all tags
      run: |
        git fetch --all --tags --force
        echo "Available tags:"
        git tag -l | sort -V

    - name: Setup Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

    - name: Determine tag
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG="${{ github.ref_name }}"
        fi
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Deploying tag: ${TAG}"

    - name: Checkout tag
      run: |
        git checkout ${{ steps.get_tag.outputs.tag }}

    - name: Create GitHub Pages content
      run: |
        mkdir -p docs
        echo '<!DOCTYPE html>' > docs/index.html
        echo '<html lang="en"><head>' >> docs/index.html
        echo '<meta charset="UTF-8">' >> docs/index.html
        echo '<meta name="viewport" content="width=device-width, initial-scale=1.0">' >> docs/index.html
        echo '<title>Amauo - Deploy Bacalhau Compute Nodes Globally</title>' >> docs/index.html
        echo '<meta name="description" content="Deploy Bacalhau compute nodes globally using AWS spot instances for cost-effective distributed computing">' >> docs/index.html
        echo '<style>' >> docs/index.html
        echo 'body{font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif;max-width:900px;margin:0 auto;padding:2rem;line-height:1.6;color:#333}' >> docs/index.html
        echo '.hero{text-align:center;margin-bottom:4rem;padding:2rem 0}' >> docs/index.html
        echo '.hero h1{font-size:3rem;margin-bottom:1rem;background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);-webkit-background-clip:text;-webkit-text-fill-color:transparent;background-clip:text}' >> docs/index.html
        echo '.hero p{font-size:1.25rem;color:#666;margin-bottom:0.5rem}' >> docs/index.html
        echo '.version{color:#888;font-size:1rem;font-weight:500}' >> docs/index.html
        echo '.section{background:#f8fafc;padding:2rem;border-radius:12px;margin:2rem 0;border-left:4px solid #667eea}' >> docs/index.html
        echo '.section h2{color:#2d3748;margin-top:0;display:flex;align-items:center;gap:0.5rem}' >> docs/index.html
        echo '.section p{color:#4a5568;margin-bottom:1rem}' >> docs/index.html
        echo 'code{background:#e2e8f0;color:#2d3748;padding:0.3rem 0.6rem;border-radius:6px;font-family:"SF Mono",Consolas,monospace;font-size:0.9rem}' >> docs/index.html
        echo 'pre{background:#2d3748;color:#e2e8f0;padding:1.5rem;border-radius:8px;overflow-x:auto;border-left:4px solid #667eea}' >> docs/index.html
        echo 'pre code{background:transparent;color:inherit;padding:0}' >> docs/index.html
        echo '.features{display:grid;grid-template-columns:repeat(auto-fit,minmax(250px,1fr));gap:1.5rem;margin:3rem 0}' >> docs/index.html
        echo '.feature{background:white;padding:1.5rem;border-radius:8px;box-shadow:0 2px 10px rgba(0,0,0,0.1);border-top:3px solid #667eea}' >> docs/index.html
        echo '.feature h3{margin-top:0;color:#2d3748}' >> docs/index.html
        echo '.links{display:flex;gap:1rem;justify-content:center;flex-wrap:wrap;margin-top:3rem}' >> docs/index.html
        echo '.link{text-decoration:none;background:#667eea;color:white;padding:0.75rem 1.5rem;border-radius:6px;font-weight:500;transition:background 0.2s}' >> docs/index.html
        echo '.link:hover{background:#5a67d8}' >> docs/index.html
        echo '@media(max-width:768px){.hero h1{font-size:2rem}.features{grid-template-columns:1fr}}' >> docs/index.html
        echo '</style>' >> docs/index.html
        echo '</head><body>' >> docs/index.html
        echo '<div class="hero">' >> docs/index.html
        echo '<h1>üöÄ Amauo</h1>' >> docs/index.html
        echo '<p>Deploy Bacalhau compute nodes globally using AWS spot instances</p>' >> docs/index.html
        echo '<p>Cost-effective distributed computing made simple</p>' >> docs/index.html
        echo '<p class="version">Version: ${{ steps.get_tag.outputs.tag }}</p>' >> docs/index.html
        echo '</div>' >> docs/index.html
        echo '<div class="section">' >> docs/index.html
        echo '<h2>üì¶ Installation</h2>' >> docs/index.html
        echo '<p>Install from PyPI using uvx (recommended for isolation):</p>' >> docs/index.html
        echo '<pre><code>uvx amauo --help</code></pre>' >> docs/index.html
        echo '<p>Or install globally with pip:</p>' >> docs/index.html
        echo '<pre><code>pip install amauo</code></pre>' >> docs/index.html
        echo '</div>' >> docs/index.html
        echo '<div class="section">' >> docs/index.html
        echo '<h2>üöÄ Quick Start</h2>' >> docs/index.html
        echo '<p>Get up and running in minutes:</p>' >> docs/index.html
        echo '<pre><code># Setup configuration<br>amauo setup<br><br># Deploy compute nodes<br>amauo create<br><br># Check running instances<br>amauo list<br><br># Clean up resources<br>amauo destroy</code></pre>' >> docs/index.html
        echo '</div>' >> docs/index.html
        echo '<div class="features">' >> docs/index.html
        echo '<div class="feature">' >> docs/index.html
        echo '<h3>üí∞ Cost Effective</h3>' >> docs/index.html
        echo '<p>Uses AWS spot instances to reduce compute costs by up to 90% compared to on-demand pricing.</p>' >> docs/index.html
        echo '</div>' >> docs/index.html
        echo '<div class="feature">' >> docs/index.html
        echo '<h3>üåç Global Scale</h3>' >> docs/index.html
        echo '<p>Deploy nodes across multiple AWS regions for improved performance and redundancy.</p>' >> docs/index.html
        echo '</div>' >> docs/index.html
        echo '<div class="feature">' >> docs/index.html
        echo '<h3>üîß Simple Setup</h3>' >> docs/index.html
        echo '<p>Automated configuration with sensible defaults. Get started with just a few commands.</p>' >> docs/index.html
        echo '</div>' >> docs/index.html
        echo '</div>' >> docs/index.html
        echo '<div class="links">' >> docs/index.html
        echo '<a href="https://pypi.org/project/amauo/" class="link">üì¶ PyPI Package</a>' >> docs/index.html
        echo '<a href="https://github.com/bacalhau-project/amauo" class="link">üêô GitHub Repository</a>' >> docs/index.html
        echo '<a href="https://github.com/bacalhau-project/amauo#readme" class="link">üìö Documentation</a>' >> docs/index.html
        echo '<a href="https://github.com/bacalhau-project/amauo/issues" class="link">üêõ Report Issues</a>' >> docs/index.html
        echo '</div>' >> docs/index.html
        echo '</body></html>' >> docs/index.html

    - name: Create version file and CNAME
      run: |
        echo "${{ steps.get_tag.outputs.tag }}" > docs/VERSION
        echo "Updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> docs/VERSION

        # Get all tags and show latest
        echo "" >> docs/VERSION
        echo "All versions:" >> docs/VERSION
        git tag -l | sort -V | tail -5 >> docs/VERSION

        # Create CNAME file for custom domain
        echo "tada.wang" > docs/CNAME

    - name: Copy files to temp directory
      run: |
        mkdir -p /tmp/gh-pages
        cp -r docs/* /tmp/gh-pages/

        # Remove any temporary files we don't need
        rm -f /tmp/gh-pages/placeholder.html /tmp/gh-pages/web.html

    - name: Checkout gh-pages branch
      run: |
        git checkout gh-pages || git checkout -b gh-pages
        git rm -rf . || true

    - name: Copy files from temp
      run: |
        cp -r /tmp/gh-pages/* .

    - name: Commit and push
      run: |
        git add -A
        git commit -m "Deploy version ${{ steps.get_tag.outputs.tag }} to GitHub Pages" || echo "No changes to commit"
        git push origin gh-pages --force

  trigger-pages-build:
    needs: update-gh-pages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write

    steps:
    - name: Trigger GitHub Pages build
      run: |
        # GitHub Pages will automatically build and deploy when gh-pages branch is updated
        # This job just ensures the previous job completed successfully
        echo "GitHub Pages deployment triggered by update to gh-pages branch"
        echo "Check https://github.com/${{ github.repository }}/settings/pages for deployment status"
