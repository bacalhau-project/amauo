name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            target: linux-x86_64
          - os: ubuntu-latest
            platform: linux
            arch: aarch64
            target: linux-aarch64
          - os: macos-13
            platform: macos
            arch: x86_64
            target: macos-x86_64
          - os: macos-14
            platform: macos
            arch: arm64
            target: macos-arm64
          - os: windows-latest
            platform: windows
            arch: x86_64
            target: windows-x86_64
    
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for proper tag access
    
    - name: Set up QEMU (for Linux ARM64)
      if: matrix.arch == 'aarch64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64
    
    - name: Set up UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: uv-${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          uv-${{ runner.os }}-${{ matrix.arch }}-
          uv-${{ runner.os }}-
    
    - name: Build for Linux ARM64 (Docker)
      if: matrix.platform == 'linux' && matrix.arch == 'aarch64'
      env:
        PYTHONIOENCODING: "utf-8"
      run: |
        # Use Docker to build ARM64 binary
        docker run --rm --platform linux/arm64 \
          -v $(pwd):/workspace \
          -w /workspace \
          python:3.11-slim \
          bash -c "
            apt-get update && apt-get install -y curl build-essential &&
            curl -LsSf https://astral.sh/uv/install.sh | sh &&
            export PATH="/root/.local/bin:$PATH" &&
            uv python install 3.11 &&
            uv run -s build_clean.py &&
            mv dist/aws-spot-deployer "dist/aws-spot-deployer-${{ matrix.target }}"
          "
    
    - name: Build for other platforms
      if: "!(matrix.platform == 'linux' && matrix.arch == 'aarch64')"
      env:
        PYTHONIOENCODING: "utf-8"
      run: |
        uv run -s build_clean.py
        # Rename binary with platform suffix
        if [ "${{ matrix.platform }}" = "windows" ]; then
          mv dist/aws-spot-deployer dist/aws-spot-deployer-${{ matrix.target }}.exe
        else
          mv dist/aws-spot-deployer dist/aws-spot-deployer-${{ matrix.target }}
        fi
      shell: bash
    
    - name: Test binary
      if: "!(matrix.platform == 'linux' && matrix.arch == 'aarch64')"
      env:
        PYTHONIOENCODING: "utf-8"
      run: |
        if [ "${{ matrix.platform }}" = "windows" ]; then
          ./dist/aws-spot-deployer-${{ matrix.target }}.exe --help
        else
          ./dist/aws-spot-deployer-${{ matrix.target }} --help
        fi
      shell: bash
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: aws-spot-deployer-${{ matrix.target }}
        path: |
          dist/aws-spot-deployer-${{ matrix.target }}*
        retention-days: 90
  
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/**/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}