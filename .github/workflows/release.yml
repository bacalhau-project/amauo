name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync

    - name: Run tests
      run: |
        uv run pytest tests/ -v
        uv run python scripts/smoke-test.py

  build:
    name: Build Distribution
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up UV
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Build package
      run: |
        uv build
        ls -la dist/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for changelog generation

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Extract version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Generate Release Notes
      id: notes
      run: |
        cat > release-notes.md << 'EOF'
        ## ðŸš€ Spot Deployer v${{ steps.version.outputs.version }}

        ### âœ¨ What's New
        Deploy any application to AWS spot instances with portable deployment manifests!

        ### ðŸ“¦ Installation

        #### Quick Start (Recommended)
        ```bash
        # Deploy immediately
        curl -sSL https://tada.wang/install.sh | bash -s -- create

        # Or use uvx directly
        uvx --from git+https://github.com/${{ github.repository }}@v${{ steps.version.outputs.version }} amauo create

        # Or install to test multiple commands
        uvx install --from git+https://github.com/${{ github.repository }}@v${{ steps.version.outputs.version }} amauo

        # With pip
        pip install amauo==${{ steps.version.outputs.version }}
        ```

        ### ðŸŽ¯ Key Features
        - **AWS Spot Instances** - Deploy Bacalhau compute nodes on cost-effective spot instances
        - **Multi-Region Support** - Deploy across multiple AWS regions simultaneously
        - **YAML Configuration** - Simple `config.yaml` for deployment settings
        - **Auto-Discovery** - Automatic AMI and VPC discovery
        - **Rich Terminal UI** - Beautiful progress display and status tables

        ### ðŸ“š Documentation
        - [Quick Start Guide](https://github.com/${{ github.repository }}/blob/main/README.md)
        - [Development Guide](https://github.com/${{ github.repository }}/blob/main/DEVELOP.md)
        - [Migration Guide](https://github.com/${{ github.repository }}/blob/main/MIGRATION_GUIDE.md)

        ### ðŸ”„ Upgrade Instructions
        ```bash
        # If installed with uvx
        uvx upgrade amauo

        # If installed with pip
        pip install --upgrade amauo
        ```

        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: release-notes.md
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    needs: release
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/amauo
    permissions:
      id-token: write  # For trusted publishing

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true

  update-docs:
    name: Update Documentation Site
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write

    steps:
    - uses: actions/checkout@v4
      with:
        ref: main

    - name: Update version in docs
      run: |
        VERSION="${GITHUB_REF#refs/tags/v}"
        echo "Latest version: $VERSION" > docs/VERSION

        # Update install.sh with new version
        sed -i "s/VERSION=\".*\"/VERSION=\"$VERSION\"/" docs/install.sh

    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/VERSION docs/install.sh
        git diff --quiet && git diff --staged --quiet || git commit -m "Update version to ${GITHUB_REF#refs/tags/}"
        git push
