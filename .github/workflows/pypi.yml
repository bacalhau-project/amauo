name: PyPI Deployment

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  deploy-pypi:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    environment:
      name: pypi
      url: https://pypi.org/project/amauo/

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine tag
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG="${{ github.ref_name }}"
        fi
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Deploying tag: ${TAG}"

    - name: Checkout tag
      run: git checkout ${{ steps.get_tag.outputs.tag }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Update version from tag
      run: |
        TAG_VERSION="${{ steps.get_tag.outputs.tag }}"
        # Remove 'v' prefix if present
        CLEAN_VERSION=${TAG_VERSION#v}
        echo "Tag version: $TAG_VERSION"
        echo "Clean version: $CLEAN_VERSION"

        # Update pyproject.toml and _version.py with tag version
        sed -i "s/version = \".*\"/version = \"$CLEAN_VERSION\"/" pyproject.toml
        echo "__version__ = \"$CLEAN_VERSION\"" > src/amauo/_version.py

        echo "Updated version files to: $CLEAN_VERSION"

    - name: Build package
      run: uv build

    - name: Normalize version for PyPI
      run: |
        # Extract version from built package filename
        WHEEL_FILE=$(ls dist/*.whl | head -1)
        VERSION=$(basename "$WHEEL_FILE" | sed 's/^amauo-//' | sed 's/-py3-none-any\.whl$//')
        echo "Original version from wheel: $VERSION"

        # Clean any potential git hash for production PyPI
        CLEAN_VERSION=$(echo $VERSION | sed 's/+.*$//')
        echo "Cleaned version for production: $CLEAN_VERSION"

        # Rebuild if needed
        if [ "$VERSION" != "$CLEAN_VERSION" ]; then
          echo "Version needs cleaning, rebuilding with: $CLEAN_VERSION"
          export SETUPTOOLS_SCM_PRETEND_VERSION=$CLEAN_VERSION
          rm -rf dist/
          uv build
          echo "New version after rebuild:"
          ls dist/
        else
          echo "Version is already clean: $CLEAN_VERSION"
        fi

    - name: Deploy to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true

    - name: Test installation from PyPI
      run: |
        sleep 60  # Wait for package to be available
        pip install amauo
        amauo --version

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
