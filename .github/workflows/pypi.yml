name: PyPI Deployment

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  deploy-pypi:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    environment:
      name: pypi
      url: https://pypi.org/project/amauo/

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Determine tag
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG="${{ github.ref_name }}"
        fi
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Deploying tag: ${TAG}"

    - name: Checkout tag
      run: git checkout ${{ steps.get_tag.outputs.tag }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Build package
      run: |
        TAG_VERSION="${{ steps.get_tag.outputs.tag }}"
        CLEAN_VERSION=${TAG_VERSION#v}
        echo "Building package from tag: $TAG_VERSION"
        echo "Expected version: $CLEAN_VERSION"

        # hatch-vcs will automatically set version from git tag
        uv build

        # Verify the built version matches the tag
        BUILT_VERSION=$(ls dist/*.whl | head -1 | sed 's/.*amauo-//' | sed 's/-py3.*//')
        echo "Built version: $BUILT_VERSION"

        if [ "$BUILT_VERSION" != "$CLEAN_VERSION" ]; then
          echo "ERROR: Built version ($BUILT_VERSION) does not match tag version ($CLEAN_VERSION)"
          exit 1
        else
          echo "SUCCESS: Version matches tag exactly: $CLEAN_VERSION"
        fi

        echo "CLEAN_VERSION=$CLEAN_VERSION" >> $GITHUB_ENV

    - name: Deploy to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true

    - name: Test installation from PyPI
      run: |
        sleep 60  # Wait for package to be available
        pip install amauo==$CLEAN_VERSION
        amauo version

        # Verify the installed version matches
        INSTALLED_VERSION=$(python3 -c "import amauo._version; print(amauo._version.__version__)")
        echo "Installed version: $INSTALLED_VERSION"
        if [ "$INSTALLED_VERSION" != "$CLEAN_VERSION" ]; then
          echo "ERROR: Installed version does not match expected version"
          exit 1
        else
          echo "SUCCESS: Installation verified with correct version"
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
