#!/bin/bash
# spot - Universal wrapper for spot-deployer with automatic credential detection
#
# This script automatically detects and uses the appropriate AWS credentials:
# - Environment variables (AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY)
# - AWS SSO session
# - AWS Profile
# - IAM Instance Role

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
REGISTRY="${SPOT_REGISTRY:-ghcr.io}"
IMAGE_NAME="${SPOT_IMAGE:-bacalhau-project/aws-spot-deployer}"
VERSION="${SPOT_VERSION:-latest}"
FULL_IMAGE="${REGISTRY}/${IMAGE_NAME}:${VERSION}"

# Default directories
CONFIG_FILE="${SPOT_CONFIG:-./config.yaml}"
FILES_DIR="${SPOT_FILES:-./files}"
OUTPUT_DIR="${SPOT_OUTPUT:-./output}"

# Function to check if running on EC2
is_ec2_instance() {
    if curl -s -m 1 http://169.254.169.254/latest/meta-data/instance-id >/dev/null 2>&1; then
        return 0
    fi
    return 1
}

# Detect AWS credentials
detect_aws_credentials() {
    echo -e "${BLUE}🔍 Detecting AWS credentials...${NC}"
    
    # 1. Check environment variables
    if [ -n "$AWS_ACCESS_KEY_ID" ] && [ -n "$AWS_SECRET_ACCESS_KEY" ]; then
        echo -e "${GREEN}✓ Using AWS credentials from environment variables${NC}"
        CREDENTIAL_METHOD="env"
        return 0
    fi
    
    # 2. Check if running on EC2 with instance role
    if is_ec2_instance; then
        echo -e "${GREEN}✓ Using EC2 instance role${NC}"
        CREDENTIAL_METHOD="instance"
        return 0
    fi
    
    # 3. Check AWS SSO
    if command -v aws >/dev/null 2>&1; then
        if aws sts get-caller-identity >/dev/null 2>&1; then
            echo -e "${GREEN}✓ Using AWS SSO session${NC}"
            CREDENTIAL_METHOD="sso"
            # Export SSO credentials as environment variables
            eval $(aws configure export-credentials --format env 2>/dev/null || true)
            if [ -z "$AWS_ACCESS_KEY_ID" ]; then
                echo -e "${YELLOW}⚠️  Failed to export SSO credentials${NC}"
                echo -e "${YELLOW}   Mounting AWS config directory instead${NC}"
                CREDENTIAL_METHOD="config"
            fi
            return 0
        fi
    fi
    
    # 4. Check AWS config/credentials files
    if [ -f "$HOME/.aws/credentials" ] || [ -f "$HOME/.aws/config" ]; then
        echo -e "${GREEN}✓ Using AWS config files${NC}"
        if [ -n "$AWS_PROFILE" ]; then
            echo -e "${BLUE}  Profile: $AWS_PROFILE${NC}"
        fi
        CREDENTIAL_METHOD="config"
        return 0
    fi
    
    # No credentials found
    echo -e "${RED}❌ No AWS credentials found!${NC}"
    echo ""
    echo "Please configure AWS credentials using one of these methods:"
    echo ""
    echo -e "${YELLOW}1. AWS SSO (Recommended):${NC}"
    echo "   aws sso login"
    echo ""
    echo -e "${YELLOW}2. Environment Variables:${NC}"
    echo "   export AWS_ACCESS_KEY_ID=your-key-id"
    echo "   export AWS_SECRET_ACCESS_KEY=your-secret-key"
    echo ""
    echo -e "${YELLOW}3. AWS Profile:${NC}"
    echo "   aws configure"
    echo "   export AWS_PROFILE=your-profile"
    echo ""
    return 1
}


# Main execution
main() {
    # Show help for certain commands without credential check
    if [[ "$1" == "help" ]] || [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]] || [[ -z "$1" ]]; then
        docker run --rm "$FULL_IMAGE" help
        exit 0
    fi
    
    # Check for version
    if [[ "$1" == "version" ]] || [[ "$1" == "--version" ]] || [[ "$1" == "-v" ]]; then
        docker run --rm "$FULL_IMAGE" --version
        exit 0
    fi
    
    # Detect credentials for commands that need them
    if [[ "$1" != "setup" ]]; then
        if ! detect_aws_credentials; then
            exit 1
        fi
    fi
    
    # Build and execute Docker command
    echo -e "${BLUE}→ Running Docker container...${NC}"
    echo ""
    
    # Build Docker command directly here
    docker_cmd=(docker run --rm)
    
    # Add TTY flags if in terminal
    if [ -t 0 ] && [ -t 1 ]; then
        docker_cmd+=(-it)
        docker_cmd+=(-e TERM="${TERM:-xterm-256color}")
        if command -v tput >/dev/null 2>&1; then
            docker_cmd+=(-e COLUMNS="$(tput cols)" -e LINES="$(tput lines)")
        fi
    fi
    
    # Add credential-specific configurations
    case "$CREDENTIAL_METHOD" in
        env|sso)
            # Pass environment variables
            docker_cmd+=(-e AWS_ACCESS_KEY_ID)
            docker_cmd+=(-e AWS_SECRET_ACCESS_KEY)
            [ -n "$AWS_SESSION_TOKEN" ] && docker_cmd+=(-e AWS_SESSION_TOKEN)
            [ -n "$AWS_DEFAULT_REGION" ] && docker_cmd+=(-e AWS_DEFAULT_REGION)
            [ -n "$AWS_REGION" ] && docker_cmd+=(-e AWS_REGION)
            ;;
        config)
            # Mount AWS config directory
            if [ -d "$HOME/.aws" ]; then
                docker_cmd+=(-v "$HOME/.aws:/root/.aws:ro")
            fi
            [ -n "$AWS_PROFILE" ] && docker_cmd+=(-e AWS_PROFILE)
            [ -n "$AWS_DEFAULT_REGION" ] && docker_cmd+=(-e AWS_DEFAULT_REGION)
            [ -n "$AWS_REGION" ] && docker_cmd+=(-e AWS_REGION)
            ;;
        instance)
            # Nothing special needed for instance roles
            ;;
    esac
    
    # Mount SSH directory if it exists
    if [ -d "$HOME/.ssh" ]; then
        docker_cmd+=(-v "$HOME/.ssh:/root/.ssh:ro")
    fi
    
    # Mount config file if it exists (not needed for setup/help)
    if [ -f "$CONFIG_FILE" ] && [[ "$1" != "setup" ]] && [[ "$1" != "help" ]]; then
        docker_cmd+=(-v "$(realpath "$CONFIG_FILE"):/app/config/config.yaml:ro")
    fi
    
    # Mount files directory if it exists
    if [ -d "$FILES_DIR" ]; then
        docker_cmd+=(-v "$(realpath "$FILES_DIR"):/app/files:ro")
    fi
    
    # Mount output directory
    mkdir -p "$OUTPUT_DIR"
    docker_cmd+=(-v "$(realpath "$OUTPUT_DIR"):/app/output")
    
    # Mount additional_commands.sh if it exists
    if [ -f "./additional_commands.sh" ]; then
        echo -e "${GREEN}✓ Found additional_commands.sh${NC}"
        docker_cmd+=(-v "$(realpath ./additional_commands.sh):/app/output/additional_commands.sh:ro")
    fi
    
    # Add image and command
    docker_cmd+=("$FULL_IMAGE")
    docker_cmd+=("$@")
    
    # Execute the command
    exec "${docker_cmd[@]}"
}

# Run main function
main "$@"