[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "spot-deployer-cli"
dynamic = ["version"]
description = "Deploy SkyPilot clusters globally with one command"
readme = "README.md"
license = "MIT"
requires-python = ">=3.9"
authors = [
    {name = "SkyPilot Deployer Team", email = "deployer@skypilot.co"},
]
keywords = [
    "skypilot",
    "cloud",
    "deployment",
    "spot-instances",
    "bacalhau",
    "distributed-computing"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: Utilities",
]
dependencies = [
    "click>=8.0.0",
    "pyyaml>=6.0",
    "rich>=13.0.0",
]


[project.urls]
Homepage = "https://github.com/bacalhau-project/aws-spot-deployer"
Documentation = "https://github.com/bacalhau-project/aws-spot-deployer#readme"
Repository = "https://github.com/bacalhau-project/aws-spot-deployer"
"Bug Tracker" = "https://github.com/bacalhau-project/aws-spot-deployer/issues"

[project.scripts]
spot-deployer = "spot_deployer.cli:cli"

[tool.hatch.version]
path = "src/spot_deployer/__init__.py"
pattern = "__version__ = [\"'](?P<version>[^\"']+)[\"']"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["src/spot_deployer"]

[tool.ruff]
line-length = 88
target-version = "py39"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long (handled by formatter)
    "B008", # function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"] # allow assert in tests

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "types-pyyaml>=6.0.12.20250822",
]
